#
# This file is a place where the behaviour of environment variable is defined.
#
# It can be used to:
# - set up a PaaS application wich provide a service to set environment variable
# - run the code locally, without PaaS
#
# To run the code locally, you had to create a minimal configuration file
# It will be read by Dotenv and exposed throught NodeJS process.env global variable
#
# Instructions:
#   1. copy this file as `.env`
#   2. edit the `.env` file with working values
#   3. uncomment the lines to activate or configure associated features
#
# Line size max: 80 characters.
#

# Ceci est la seule variable dont l'exposition par Dotenv est inutile
# Et dont l'absence sur le PaaS n'aura aucune incidence, mais qui ajouté à la maintenabilité du code
#
# NODE_ENV: type d'environnement d'exécution (réplication incrémentale uniquement)
# * valeur = test ou production
#  => dans le code (hors test automatisé), ne pas charger les variables d'environnement à partir du fichier .env
#  C'est la configuration de la CI et sur toutes les review-app Scalingo
#
# * valeur = absente ou autre (ex: development)
# => dans le code (hors test automatisé), charger les variables d'environnement à partir du fichier .env
#  C'est la configuration par défaut en local (absente)
#
# presence: required
# type: String
# default: none
# sample: NODE_ENV=development
NODE_ENV=

# Version du client PG utilisé
#
# presence: required
# type: String
# default: 12
PG_CLIENT_VERSION=

# Durée maximum autorisée pour la restauration (en secondes)
#
# presence: required
# type: Number
# default: 180
RETRIES_TIMEOUT_MINUTES=

# API key provided in your Airtable personal account used for fetching learning
# content.
#
# presence: required
# type: String
# default: keyblo10ZCvCqBAJg
AIRTABLE_API_KEY=

# API token provided in your Airtable database configuration used for fetching
# learning content.
#
# presence: required
# type: String
# default: app3fvsqhtHJntXaC
AIRTABLE_BASE=

# Une chaîne au format `cron` (interprétée par
# https://www.npmjs.com/package/node-cron) qui spécifie la fréquence à
# laquelle l'opération de réplication doit être exécutée. Exemple :
# `10 5 * * *` correspond à une exécution quotidienne à 5h10 UTC.
#
# presence: required
# type: Cron
# default: none
# sample: SCHEDULE=10 5 * * *
SCHEDULE=

# Cette variable est utilisée pour indiquer le nombre maximum de tentative de
# rejeux
#
# presence: required
# type: Number
# default: 10
MAX_RETRY_COUNT=

# Nombre de processus à utiliser pour restaurer le backup
#
# presence: required
# type: Number
# default: 4
PG_RESTORE_JOBS=

# Restaurer ou non les contraintes de clés étrangères. Si non renseignée, les
# contraintes de clés étrangères ne sont pas restaurées. Si "true", les
# contraintes de clés étrangères sont restaurées.
#
# presence: required
# type: Boolean
# default: none
# sample: RESTORE_FK_CONSTRAINTS=false
RESTORE_FK_CONSTRAINTS=

# Spécifier le mode de restauration des tables.
# La variable est un objet avec pour clé le nom de la table et pour valeur 'incremental' ou 'none'
# Si 'incremental' la table sera restaurée en mode incrémental.
# Si 'none' la table ne sera pas restaurée.
# Pour les tables non spécifiées, elles seront restaurées intégralement
# ⚠️ le mode incrémental ne doit être utilisé que pour des tables en ajout uniquement. Si les lignes sont modifiées en source, cela ne sera pas reflété dans la réplication
# les tables answers, knowledge-elements & knowledge-elements-snapshots sont indiquées pour le mode incrémental.
# presence: required
# type: json
# default: {}
# sample: BACKUP_MODE= {"answers":"incremental", "knowledge-elements":"incremental","knowledge-elements-snapshots":"incremental"}
BACKUP_MODE=

# URL de la BDD depuis laquelle seront récupérées les données lors du mode incrémental
# L'utilisateur ne doit PAS etre postgres !
#
# presence: required
# type: DatabaseURL
# default: postgresql://source_user@localhost/source_database
SOURCE_DATABASE_URL=

# URL de la BDD vers laquelle seront dupliquées les données lors du mode incrémental
# L'utilisateur ne doit PAS etre postgres !
#
# presence: required
# type: DatabaseURL
# default: postgresql://target_user@localhost/target_database
TARGET_DATABASE_URL=

# URL d'accès à la base _cible_ qui sera écrasée et alimentée depuis le
# _backup_ à chaque exécution. Cette variable est en principe automatiquement
# alimentée par Scalingo lors de l'ajout d'une base PostgreSQL.
#
# presence: required
# type: DatabaseURL
# default: postgresql://target_user@localhost/target_database
DATABASE_URL=

# Sentry

# Activation de sentry pour collecter les erreurs
# presence: required
#
# type: SentryEnabled
# default: false
SENTRY_ENABLED=

# Permet de connecter Sentry et identifier le projet,
# si non renseigné rien ne sera envoyé par Sentry
# presence: required
#
# type: SentryDsn (Url instance Sentry)
SENTRY_DSN=

# Permet d'identifier sur quel environnement
# l'erreur est remontée
# presence: required
#
# type: SentryEnvironment
# default : developpment
SENTRY_ENVIRONMENT=

# Permet de définir la stack trace des évènements lorsqu'une erreur
# est remontée
# presence: required
#
# type: SentryMaxBreadCrumbs
# default : 100
SENTRY_MAX_BREADCRUMBS=

# Permet d'activer le mode debug sur le SDK
# presence: required
#
# type: SentryDebug
# default : false
SENTRY_DEBUG=

# Définit le nombre de caractères sur une ligne avant
# qu'elle soit tronquée
# presence: required
#
# type: SentryMaxValueLength
# default : 1000
SENTRY_MAX_VALUE_LENGTH=
